import matplotlib.pyplot as plt
import matplotlib.patches as patches


def bbox_to_rect_params(bbox, offset=None):
    """Convert values in bbox tuple to the format that
    `matplotlib.patches.Rectangle()` takes.

    Parameters
    ----------
    bbox : tuple (containing 4 float values)
        A tuple of bounding box in the format of `(x1, y1, x2, y2)`
        (bottom-left and top-right corner).

    Returns
    -------
    (x1, y1), width, height : float
        Coordinate of bottom-left corner and width/height of bounding box.
    """
    x1, y1, width, height = *(bbox[:2]), bbox[2]-bbox[0], bbox[3]-bbox[1]
    if offset:
        if len(offset) != 2:
            raise ValueError('`offset` should contains only 2 values: (x, y)')
        return (x1 + offset[0], y1 + offset[1]), width, height
    else:
        return (x1, y1), width, height


def _draw_single_page_bboxes(page, fig, ax, page_offset=None, show_annotation=False):
    ax.add_patch(
        patches.Rectangle(
            *bbox_to_rect_params(page.bbox, offset=page_offset),
            linewidth=1, edgecolor='k', facecolor='none'
        )
    )

    for i, obj in enumerate(page):
        ax.add_patch(
            patches.Rectangle(
                *bbox_to_rect_params(obj.bbox, offset=page_offset),
                linewidth=1, edgecolor='g', facecolor='none'
            )
        )
        # Show the order of this bbox
        if show_annotation:
            (x1, y1), *_ = bbox_to_rect_params(obj.bbox, offset=page_offset)
            ax.text(x1, y1, str(i))


def draw_pdf_objects(page, objects, show_annotation=False, return_fig=False):
    """Draw bounding boxes of PDF objects in a single page.

    Parameters
    ----------
    page : `<pdfminer.layout.LTPage>`
    show_annotation : bool
        Show annotation indicating the resolving order of a PDF object.
    return_fig : bool
        Return figure and axis object generated by `matplotlib`.

    Returns
    -------
    fig : matplotlib.figure.Figure
    ax : matplotlib.axes._subplots.AxesSubplot
    """
    fig, ax = plt.subplots()

    ax.add_patch(
        patches.Rectangle(
            *bbox_to_rect_params(page.bbox),
            linewidth=1, edgecolor='k', facecolor='none'
        )
    )

    for i, obj in enumerate(objects):
        ax.add_patch(
            patches.Rectangle(
                *bbox_to_rect_params(obj.bbox),
                linewidth=1, edgecolor='g', facecolor='none'
            )
        )
        # Show the order of this bbox
        if show_annotation:
            (x1, y1), *_ = bbox_to_rect_params(obj.bbox)
            ax.text(x1, y1, str(i))

    ax.axis('equal')

    if return_fig:
        return fig, ax
    else:
        plt.show()
